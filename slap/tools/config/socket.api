# Determine the C-compiler flags needed to get the "socket" API.
# Print it as a Makefile definition to stdout, and set equivalent
# environment variables.
# This is intended to cover the common subset of X/Open XNET4,
# BSD sockets, and SVR4 sockets.
#


# first locate an ANSI C compiler, if possible:
#
[ "$XACC" = "" ] && . ansic.cmd >/dev/null


echo "probing for \"socket\" API" 1>&2

# build a small C source file that uses uniqely "socket" facilities:
#
sed -e "s/NODE_NAME/`uname -n`/" > /tmp/$$.c << EOT
#include <stdio.h>
#include <errno.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>

int main(ac, av)
	unsigned int ac;
	char **av;
	{
	extern int errno;
	int s, v, l;

	/* reference related functions: */
	gethostbyname("NODE_NAME");
	getprotobyname("tcp");
	inet_addr("127.0.0.1");
	/* do some real socket calls: */
	s = socket(PF_INET, SOCK_DGRAM, 0);	/* unspecified protocol */
	errno = ENOTSOCK;			/* existance-test */
	l = sizeof(v);
	if (getsockopt(s, SOL_SOCKET, SO_ERROR, (char *) &v, &l) < 0)
		return (1);
	return (0);
	}
EOT


# Hunt for the API...
#
found="no"
dir=""
# only if we can...
#
if [ "$XACC" != "" ] ; then

	# Start with the obvious directories:
	#
	list="/usr /usr/local /opt/local /opt"

	# add contents of LD_LIBRARY_PATH and PATH
	#
	list="$list `echo ${LD_LIBRARY_PATH}: | sed -e 's/:/ /g' -e 's:/[^/][^/]* : :g'`"
	list="$list `echo ${PATH}: | sed -e 's/:/ /g' -e 's:/[^/][^/]* : :g'`"

	# and finish with the outside chances:
	#
	list="$list $HOME"	# you never know...

	# go find...
	#
	for d in "" $list ; do
		if [ "$d" = "" ] ; then
			idf=""
			ldf=""
		elif [ -f ${d}/include/sys/socket.h ] ; then
			idf="-I$d/include"
			ldf="-L$d/lib"
		else
			continue
		fi
		#
		# importent to try the empty list FIRST...some systems
		# have bundled the socket/nsl/inet APIs into libc, but
		# provide backward-compatible CROSS-compiled versions
		# of the old separate libraries (which we do NOT want to use)!
		#
		for lf in '' -lsocket '-lsocket -lnsl' '-lsocket -linet -lnsl' '-lxnet' '-lxnet -lnsl'; do
			$XACC $idf -o /tmp/$$.exe /tmp/$$.c $ldf $lf >/dev/null 2>&1
			chmod +x /tmp/$$.exe 2>/dev/null
			if [ -x "/tmp/$$.exe" ] && /tmp/$$.exe ; then
				found=yes
				break 2		# Got it!
			fi
		lf=""
		done
	idf=""
	ldf=""
	done
fi


# build composite results:
#
SOCKET_INCLUDE="$idf"
SOCKET_LIBRARY="$ldf $lf"


# and output...
#
if [ "$found" = no ] ; then
	status=1
	echo '\007' 1>&2
	cat << EOT 1>&2
	********************  W A R N I N G  ************************
	******                                                  *****
	******    Cannot determine C compiler flags needed to	*****
	******    enable "network socket" functions.		*****
	******                                                  *****
	*************************************************************

	You will need to manually adjust one or more of the following
	variables in the makefile generated by this script:

		SOCKET_INCLUDE=...
		SOCKET_LIBRARY=...

EOT
	echo "Press RETURN to continue \c" 1>&2
	read dummy
	echo "" 1>&2
fi

cat << EOT 

# Extra C compiler flags needed to get the "network sockets" API,
# expressed as -I, -L or -l flags.
#
SOCKET_INCLUDE=$SOCKET_INCLUDE
SOCKET_LIBRARY=$SOCKET_LIBRARY

EOT

export SOCKET_INCLUDE
export SOCKET_LIBRARY
