# Determine the command-line prefixes for compiling/linking ANSI C programs,
# append it as a Makefile definition to stdout, and set equivalent
# environment variables.
#

echo "probing for ANSI C compiler" 1>&2

if [ -d "$1" ] ; then
	prefix="${1}/"
	echo "restricted search to directory $prefix" 1>&2
else
	prefix=""
fi

# create a small C program that uses some uniquely ANSI C facilities:
#
cat > /tmp/$$.c << 'EOT'
/* C program source to test compiler conformance to
 * ANSI Standard X3.159-1989 (hosted program environment).
 *
 * Do YOU have an ANSI C compiler?
 */
#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>	/* non-ANSI compilers never have this one! */

int main(unsigned int, char **);	/* testing for prototype declarations */

static void put(char *fmt, ...)		/* ANSI varargs syntax (nice one!) */
	{
	va_list ap;
	va_start(ap, fmt);
	vfprintf(stdout, fmt, ap);
	va_end(ap);
	return;
	}

int main(unsigned int ac, char **av)
	{
	for (--ac, ++av; ac && *av; --ac, ++av)
		{
		put("%s", *av);
		put((ac == 1) ? "\n" : " ");
		}
	return (EXIT_SUCCESS);		/* ANSI-ism */
	}
EOT


# a function to test compilation...
#
trycompile()
	{
	xxxxxxx="${1:?internal error - missing parameter to trycompile}"
	sentinel="bye bye, blackbird"

	# divert our stderr, in case the potential program is not there
	exec 9>&2
	exec 2>/dev/null

	$* -o /tmp/$$.exe /tmp/$$.c >/dev/null 2>&1

	# restore stderr
	exec 2>&9

	# Careful: some compilers do not give generated program files
	# execute permissions!

	if [ -f /tmp/$$.exe ] && chmod +x /tmp/$$.exe && 
			[ "$sentinel" = "`/tmp/$$.exe $sentinel`" ] ; then
		return 0
	fi
	return 1
	}


# probe for compiler and flags needed to get ANSI C semantics:
#
# NOTE: many systems have a "c89" command that is NOT conformant to POSIX.2 -
# often it is just an alias for the vendor's own C compiler. Thus we must
# still test "c89" commands with all relevant options, and probe for a
# generic POSIX.2 "c89" only after all the more specific tests.
#
ACC=""
while [ "$ACC" = "" ] ; do

	# GNU C v2.x (on any UNIX-like O/S)?
	flags="-Wall -Wstrict-prototypes -Wmissing-prototypes -O2"
	for acc in gcc cc ; do
		acc="${prefix}$acc"
		if trycompile "$acc -ansi $flags" ; then
			ACC="$acc -ansi $flags"
			XACC="$acc $flags"
			break 2
		fi
	done
	
	# SunPro compiler?
	flags="-v -fd -mc -s -xstrconst -xO2"
	for acc in cc c89 ; do
		acc="${prefix}$acc"
		if trycompile "$acc -Xc $flags" ; then
			ACC="$acc -Xc $flags"
			XACC="$acc -Xa $flags"
			break 2
		fi
	done
	
	# HP-UX ANSI C compiler (but NOT the poor bundled one)?
	flags="-Ae +DAportable +ESlit"
	for acc in cc c89 ; do
		acc="${prefix}$acc"
		if trycompile "$acc $flags" ; then
			ACC="$acc $flags"
			break 2
		fi
	done
	
	# IBM AIX C Compiler?
	flags="-qro -qnoprint -qroconst -qextchk -O2"
	for acc in cc xlc c89 ; do
		acc="${prefix}$acc"
		if trycompile "$acc $flags" ; then
			ACC="$acc $flags"
			break 2
		fi
	done
	
	# SGI bundled Irix (5.x, 6.x) C Compiler or SGI MIPSpro C Compiler?
	flags="-use_readonly_const -G0 -rdata_shared -O2"
	for acc in cc c89 ; do
		acc="${prefix}$acc"
		if trycompile "$acc $flags" -ansi ; then
			ACC="$acc $flags -ansi"
			# damn Irix inverted POSIX API logic!
			XACC="$acc $flags"	# without -ansi!!
			break 2
		fi
	done
	
	# Cray Research Standard C Compiler (eg: under UNICOS et al)?
	flags="-O -h abort -h port=x -h stdc -h notolerant"
	for acc in cc c89 ; do
		acc="${prefix}$acc"
		if trycompile "$acc $flags" ; then
			ACC="$acc $flags"
			break 2
		fi
	done
	
	# generic SVR3/SVR4 compiler?
	flags="-Xa -Wc,O1"
	acc="cc"
	acc="${prefix}$acc"
	if trycompile "$acc $flags" ; then
		ACC="$acc $flags"
		break
	fi
	
	# how about a GENUINE generic POSIX.2 C compiler?
	flags="-O -s"
	acc="${prefix}c89"
	if trycompile $acc ; then
		ACC="$acc $flags"
		break
	fi
	
	# something else (just hope that no compiler flags are needed!)
	for acc in cc c89 acc xlc gcc ; do
		acc="${prefix}$acc"
		if trycompile "$acc" ; then
			ACC="$acc"
			break 2
		fi
	done

	break
done
[ -z "$XACC" ] && XACC="$ACC"


if [ "$ACC" = "" ] ; then
	status=1
	ACC="cc"
	XACC="cc"
	echo "\007" 1>&2
	cat << EOT 1>&2
	**********************  E R R O R  **************************
	******                                                  *****
	******    Cannot find an ANSI C compiler on your PATH   *****
	******                                                  *****
	*************************************************************

	You will need to manually adjust the following variables in
	the makefile generated by this script:

		ACC=...
		XACC=...

EOT
	echo "Press RETURN to continue \c" 1>&2
	read dummy
	echo "" 1>&2
fi

cat << EOT

# command-line to compile strict ANSI C programs:
#
ACC=$ACC


# command-line to compile ANSI C programs using
# namespace extensions selected by feature-test macros:
#
XACC=$XACC

EOT

export ACC
export XACC
